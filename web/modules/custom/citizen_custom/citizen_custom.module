<?php

use Drupal\paragraphs\Entity\Paragraph;
/**
 * @file
 * Contains citizen_custom.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Site\Settings;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_help().
 */
function citizen_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the citizen custom module.
    case 'help.page.citizen_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom glue module for Electric Citizen sites') . '</p>';
      return $output;
    default:
  }
}

/**
 * Implements hook_theme().
 */
function citizen_custom_theme() {
  return [
    'citizen_custom' => [
      'template' => 'citizen_custom',
      'render element' => 'children',
    ],
    'site_search' => [
      'variables' => [
        'title' => 'Site Search',
      ],
    ],
	'social_share_block' => [
      'variables' => [
        'title' => 'Social Share',
		'data' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_html().
 */
function citizen_custom_preprocess_html(&$variables){
 	// Add role classes for current user to body.
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();
  foreach($userRole as $role ){
    if($role != 'authenticated'){
      $variables['attributes']['class'][] = 'role-' . $role;
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function citizen_custom_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'site_search') {
    $variables['attributes']['role'] = 'search';
  }
  // Set custom help text.
  if ($variables['plugin_id'] == 'help_block') {
    $route_name = \Drupal::routeMatch()->getRouteName();
    $parameters = \Drupal::routeMatch()->getCurrentRouteMatch()->getParameters();
    if (isset($variables['content'][0]['#markup'])){
      switch ($route_name) {
        case 'layout_builder.defaults.node.view':
          if($parameters->get('node_type')){
            $nodeType = $parameters->get('node_type');
            $cleanType = ucwords(str_replace("_"," ",$nodeType)) . ' ';
          }
          $output = '';
          $output .= '<h2>' . $cleanType . t('Layout Builder') . '</h2>';
          $output .= '<p><strong>' . t('WARNING: ') . '</strong>'. t('Changes to this layout will affect all non-customized ') . str_replace("_"," ",$nodeType) . t(' nodes.') . '</p>';
          $output .= '<p><small>' . t('Forms and links inside the content of the layout builder tool have been disabled.') . '</small></p>';
          $variables['content'][0]['#markup'] = $output;
          break;
        case 'layout_builder.overrides.node.view':
          $output = '';
          $output .= '<h2>' . t('Customize This Layout') . '</h2>';
          $output .= '<p><strong>' . t('WARNING: ') . '</strong>'. t('Saving this layout (even without making changes) will turn this into a custom node. Custom nodes will not reflect any future global changes to the content type. If you are here in error, click "View" or "Edit" above to exit.') . '</p>';
          $output .= '<p><small>' . t('Forms and links inside the content of the layout builder tool have been disabled.') . '</small></p>';
          $variables['content'][0]['#markup'] = $output;
          break;
        case 'layout_builder.overrides.node.discard_changes':
          $output = '';
          $output .= '<h2>' . t('Discard Changes') . '</h2>';
          $output .= '<p>' . t('Remove any non-saved changes made in layout customization.') . '</p>';
          $variables['content'][0]['#markup'] = $output;
          break;
        case 'layout_builder.overrides.node.revert':
          $output = '';
          $output .= '<h2>' . t('Revert Custom Layout') . '</h2>';
          $output .= '<p>' . t('Revert this layout to the default layout for this content type.') . '</p>';
          $variables['content'][0]['#markup'] = $output;
          break;
      }

    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function citizen_custom_page_attachments(array &$attachments) {
	// Add custom admin theme files to admin pages.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $attachments['#attached']['library'][] = 'citizen_custom/admin-global';
  }
}

/**
 * Implements hook_form_alter().
 */
function citizen_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $formId = $form['#id'];
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();
  // Remove layout builder revision info access (to hide unneeded revision field).
  if (strpos($form_id, 'layout_builder_form') > 0) {
    $form['advanced']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    $form['revision']['#access'] = FALSE;
  }
}

/**
 * Implements hook_node_form_alter().
 */
function citizen_custom_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  // Change promotion text to something more contextual.
  if ($node->getType() == 'news') {
    $form['promote']['widget']['value']['#title'] = 'Add to Featured News';
    $form['promote']['widget']['value']['#description'] = 'Should have a news image.';
  }
  if ($node->getType() == 'event') {
    $form['promote']['widget']['value']['#title'] = 'Add to Featured Events';
    $form['promote']['widget']['value']['#description'] = 'Should have a news image.';
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function citizen_custom_local_tasks_alter(&$local_tasks) {
  // Hide redirects settings from non admins.
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();
  if(!in_array('administrator', $userRole)){
    if(isset($local_tasks['redirect.list'])){
      unset($local_tasks['redirect.list']);
    }
    if(isset($local_tasks['redirect.settings'])){
      unset($local_tasks['redirect.settings']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\search\Form\SearchBlockForm
 */
function citizen_custom_form_site_search_form_alter(&$form, FormStateInterface $form_state) {
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}

/**
 * Implements hook_field_widget_single_element_form_alter()).
 */
function citizen_custom_field_widget_single_element_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  // Add paragraph type classes to paragraph previews.
  if ($field_definition->getType() == 'entity_reference_revisions') {
    if (isset($element['#paragraph_type'])) {
      $type = $element['#paragraph_type'];
      $element['top']['type']['#attributes']['class'][] = str_replace('_','-',$type);
      if(isset($element['top']['type']['icon'])){
        unset($element['top']['type']['icon']);
      }
    }
  }
  // Add custom link help text for emails.
  if ($field_definition->getType() == 'link') { 
    if ($element['uri']['#description'] && ($field_definition->getUniqueIdentifier() == "menu_link_content-link")) {
      $linkHelp = $element['uri']['#description'];
      $element['uri']['#description']['#items'][] = t('To create an email link, enter "<strong>mailto:</strong>example@email.com".');
    }
  }
}

/**
 * Implements views_pre_view().
 */
function citizen_custom_views_pre_view($view, $display_id, &$args) {
	// Alters views to accept fields from related paragraphs to be used for filters.
  if(isset($view->element['#name'])) {
    if (($view->element['#name'] == 'events') && ($view->current_display === 'events_list')) {
      $filters = $view->display_handler->getOption('filters');
      $paragraph_id = $view->args[0];
      if ($paragraph_id){
        $paragraph = Paragraph::load($paragraph_id);
        //unset or alter categories filter
        if($paragraph->field_events_category[0]){
          //make an array out of the category set in the paragraph
          $categories = [];
          foreach ($paragraph->field_events_category as $delta => $category) {
            $categories[] = $category->target_id;
          }
          // replace the category_tid filter with the paragraph category
          $filters['field_category_target_id']['value'] = $categories;
        } else {
          //if the category field is not used, then unset the category filter
          if ($filters['field_category_target_id']) {
            unset($filters['field_category_target_id']);
          }
        }//end category filter
        $view->display_handler->setOption('filters', $filters);
        if(isset($paragraph->field_limit_list[0])){
          $per_page = $paragraph->field_limit_list[0]->value;
          $pager = $view->display_handler->getOption('pager');
          $pager['type'] = 'some';
          $view->setItemsPerPage($per_page);
        } else {
          $pager['type'] = 'none';
        }
        $view->display_handler->setOption('pager', $pager);
      }
    }
    if (($view->element['#name'] === 'news') && ($view->current_display === 'news_list')) {
      $filters = $view->display_handler->getOption('filters');
      $paragraph_id = $view->args[0];
      if ($paragraph_id){
        $paragraph = Paragraph::load($paragraph_id);
        //unset or alter categories filter
        if($paragraph->field_news_category[0]){
          //make an array out of the category set in the paragraph
          $categories = [];
          foreach ($paragraph->field_news_category as $delta => $category) {
            $categories[] = $category->target_id;
          }
          // replace the category_tid filter with the paragraph category
          $filters['field_category_target_id']['value'] = $categories;
        } else {
          //if the category field is not used, then unset the category filter
          if ($filters['field_category_target_id']) {
            unset($filters['field_category_target_id']);
          }
        }//end category filter
        $view->display_handler->setOption('filters', $filters);
        if(isset($paragraph->field_limit_list[0])){
          $per_page = $paragraph->field_limit_list[0]->value;
          $pager = $view->display_handler->getOption('pager');
          $pager['type'] = 'some';
          $view->setItemsPerPage($per_page);
        } else {
          $pager['type'] = 'none';
        }
        $view->display_handler->setOption('pager', $pager);
      }
    }
  }
}

